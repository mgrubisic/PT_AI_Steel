import numpy as np
import os
import random
import gym
from gym import Env
from gym.spaces import Discrete, Box, Dict, Tuple, MultiBinary, MultiDiscrete
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import VecFrameStack
from stable_baselines3.common.evaluation import evaluate_policy


import os

# Build an agent to give us the best shower possible
# - random temperature at start, want to have 37-39Â°
FLAG_test = False
class ShowerEnv(Env):
    def __init__(self):
        self.action_space = Discrete(3)
        self.observation_space = Box(low=np.array([0]), high=np.array([100]))
        self.state = 38 + random.randint(-3,3)
        self.shower_length = 60

    def step(self, action):
        self.state += action-1
        self.shower_length -= 1

        # Calculate reward
        if self.state >= 37 and self.state <=39:
            reward = 1
        else:
            reward = -1

        if self.shower_length <=0:
            done = True
        else:
            done = False
        info = {}
        return self.state, reward, done, info

    def render(self):
        pass
    def reset(self):
        self.shower_length = 60
        self.state = 38 + random.randint(-3, 3)
        return self.state
env = ShowerEnv()
# Test environment
if FLAG_test:

    episodes = 5
    for episode in range(1, episodes+1):
        obs = env.reset()
        done = False
        score = 0

        while not done:
            env.render()
            action = env.action_space.sample()
            obs, reward, done, info = env.step(action)
            score+=reward
        print('Episode:{} Score:{}'.format(episode, score))
    env.close()


shower_path = os.path.join('Training', 'Saved Models', 'Shower_Model_PPO')
log_path = os.path.join('Training', 'Logs')
model = PPO.load(shower_path, env)
#model = PPO('MlpPolicy', env, verbose=1, tensorboard_log=log_path)
model.learn(total_timesteps=200)
model.save(shower_path)

print(evaluate_policy(model, env, n_eval_episodes=10, render=False))