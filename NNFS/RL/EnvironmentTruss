import numpy as np
import random
import matplotlib.pyplot as plt
from gym import Env
from gym.spaces import Discrete, Box, Dict, Tuple, MultiBinary, MultiDiscrete
from stable_baselines3 import PPO
from stable_baselines3.common.evaluation import evaluate_policy

# Build an agent to give us the best truss for the problem.
# Goal: optimizing a truss beam with respect to weight or GWP (global warming potential)

# ---- Flags
FLAG_test = True
# Custom environment
class TrussEnv(Env):
    def __init__(self, span, height, num_trusses):
        # Initilizing the systems parameters
        self.span = span
        self.height = height
        self.num_trusses = num_trusses
        self.nodes = self.initNodes(span, height, num_trusses)
        self.bestWeight = 800000
        n_profiles = 9
        n0 = 42
        # Defining the environment parameters
        self.action_space = MultiDiscrete([n_profiles, n_profiles, n_profiles, n_profiles])
        self.observation_space = Box(200,80000, shape=(1,))
        self.state = self.calculateTruss([9, 9, 9, 9])
        self.episode_length = 200

    def step(self, action):
        self.state = self.calculateTruss(action)
        self.episode_length -= 1

        # Calculate reward. Set up reward scheme
        if self.state < self.bestWeight:
            self.bestWeight = self.state
            reward = 1
        elif self.state == 79999:
            reward = -1.1
        else:
            reward = -1

        if self.episode_length <=0:
            done=True
        else:
            done=False

        info={}
        return self.state, reward, done, info

    def render(self):
        pass
        '''plt.scatter(*zip(*self.upper_nodes))
        plt.plot(*zip(*self.upper_nodes))
        plt.scatter(*zip(*self.lower_nodes))
        plt.plot(*zip(*self.lower_nodes))
        plt.plot(*zip(*self.all_nodes))
        plt.show()'''
    def reset(self):
        self.episode_length = 60
        self.state = 80000
        self.bestWeight = 80000
        return self.state

    def initNodes(self, span, height, num_trusses):
        # Number of trusses, 1 pr m of truss system for now
        #
        num_lower_nodes = num_trusses / 2

        length_upper_seg = span / num_lower_nodes
        length_ls = length_upper_seg

        first_low = [length_ls / 2, -height]

        lower_nodes = []
        lower_nodes.append(first_low)
        upper_nodes = [[0, 0]]

        incr = length_upper_seg
        delta_lower = incr / 2
        delta_upper = 0
        for i in range(1, int(num_lower_nodes)):
            delta_lower += incr
            delta_upper += incr
            upper_nodes.append([round(delta_upper, 2), 0])
            lower_nodes.append([round(delta_lower, 2), -height])

        upper_nodes.append([span, 0])

        all_nodes = []
        print(len(upper_nodes))
        for i in range(1, len(upper_nodes) + 1):

            if i >= len(upper_nodes):
                all_nodes.append(upper_nodes[i - 1])
            else:
                all_nodes.append(upper_nodes[i - 1])
                all_nodes.append(lower_nodes[i - 1])
        self.upper_nodes = upper_nodes
        self.lower_nodes = lower_nodes
        self.all_nodes = all_nodes

    def calculateTruss(self, action):
        return random.randint(200, 800000)

if FLAG_test:
    env = TrussEnv(8, 1, 8)
    episodes = 5
    for episode in range(1, episodes+1):
        obs = env.reset()
        done = False
        score = 0

        while not done:
            env.render()
            action = env.action_space.sample()
            obs, reward, done, info = env.step(action)
            score += reward
        print('Episode:{} Score:{}'.format(episode, score))
    env.close()
